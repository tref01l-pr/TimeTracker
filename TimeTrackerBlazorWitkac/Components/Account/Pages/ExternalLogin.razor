@page "/Account/ExternalLogin"
@using TimeTrackerBlazorWitkac.AlertMessages.ErrorMessages.Services.Application

@inject IEmailSender<UserEntity> EmailSender
@inject ILogger<ExternalLogin> Logger

<PageTitle>Register</PageTitle>

<StatusMessage Message="@message"/>
<h1>Register</h1>
<h2>Associate your @ProviderDisplayName account.</h2>
<hr/>

<div class="alert alert-info">
    You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
    Please enter an email address for this site below and click the Register button to finish
    logging in.
</div>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input type="text" value="@UserEmail" class="form-control" disabled/>
                <label for="email" class="form-label">E-mail</label>
            </div>
            <div class="form-floating mb-3">
                <RoleSelector Input="Input" Roles="@TotalRoles"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Zarejestrować się</button>
        </EditForm>
    </div>
</div>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? RemoteError { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    private string? UserEmail;
    private IList<string> TotalRoles = new List<string>();

    private string ProviderDisplayName => externalLoginInfo?.ProviderDisplayName ?? "";

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Błąd od zewnętrznego dostawcy: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Błąd ładowania zewnętrznych danych logowania.", HttpContext);
        }

        externalLoginInfo = info;

        var rawEmail = externalLoginInfo.Principal.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);

        if (rawEmail == null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Błąd ładowania informacji e-mail.", HttpContext);
        }

        UserEmail = rawEmail.Value.Replace("_", "@").Split("#EXT#")[0];

        var res = await RolesService.GetAllAsync();
        if (res.IsFailure)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", RolesServiceErrorMessages.NotFoundError.GetDescription(), HttpContext);
        }
        
        TotalRoles = res.Value;
        
        var userExist = await UsersService.GetByEmailAsync<User>(UserEmail);
        if (userExist.IsFailure)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", userExist.Error, HttpContext);
        }

        if (userExist.Value != null)
        {
            await OnValidSubmitAsync();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var user = User.Builder()
            .SetUserName(UserEmail)
            .SetEmail(UserEmail)
            .Build();

        if (user.IsFailure)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", user.Error, HttpContext);
        }

        var result = await AuthorizationService.RegisterWithExternalTokenAsync(user.Value, externalLoginInfo.ProviderKey, externalLoginInfo.LoginProvider, Input.Role);

        if (result.IsFailure)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", result.Error, HttpContext);
        }

        NavigationManager.NavigateTo("/Account/Manage", true);
    }

    private sealed class InputModel : IInputModel
    {
        public string? Role { get; set; }
    }
}